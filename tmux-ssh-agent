#!/usr/bin/env ruby
=begin
In .tmux.conf, (without default agent)
  run -b 'exec tmux-ssh-agent start -n'
or (with default agent)
  run -b 'ssh-agent tmux-ssh-agent start'

In your shell's login profile,
  if [ -z "$TMUX" ] && [ -n "$SSH_TTY" ]; then
    tmux-ssh-agent add 2>/dev/null || :
  fi
=end

require 'optparse'
require 'pathname'
require 'socket'
require 'stringio'

SSH_AGENT_FAILURE = 5
SSH_AGENT_SUCCESS = 6
SSH_AGENTC_EXTENSION = 27
SSH_AGENT_EXTENSION_FAILURE = 28
SSH_EXT_AGENTC_KILL_AGENT = 200
SSH_EXT_AGENTC_ADD_AGENT = 201
SSH_EXT_AGENTC_REMOVE_AGENT = 202
SSH_EXT_AGENTC_REQUEST_AGENTS = 203
SSH_EXT_AGENT_AGENTS_ANSWER = 204

EXT_ID = -'tmux-ssh-agent@exapi.co'

module SSHAgentSocket
  def read_packet
    unless len = self.recv(4).unpack1('N')
      return  # EOF
    end
    type = self.recv(1).unpack1('C')
    contents = len > 1 ? self.recv(len - 1) : ''
    [type, contents]
  end

  def send_packet(type, contents = '')
    len = contents.bytesize
    packet = [len + 1, type, contents].pack('NCa*')
    self.send(packet, 0)
  end

  def request(type, contents = '')
    send_packet(type, contents)
    read_packet
  end
end

class Tmux
  def self.ping
    IO.popen(['tmux', 'display-message', '-p', '1'], &:read).chomp == '1'
  end

  def self.set_environment(name, value)
    system('tmux', 'set-environment', '-g', name, value.to_s)
  end

  def self.current_client
    IO.popen(['tmux', 'list-client', '-F', '#{client_activity}:#{client_tty}']) do |f|
      f.each_line.map {|l| l.chomp.split(?:, 2) }.max_by {|p| p[0] }[1]
    end
  end
end

class Server
  def initialize(options)
    @options = options
    @agents = {}
    @default_agent = nil
  end

  attr_reader :options
  attr_accessor :agents, :default_agent

  def lock(path)
    lock_file = options[:address].sub_ext('.lock')
    File.open(lock_file, File::WRONLY | File::CREAT) do |f|
      unless f.flock(File::LOCK_EX | File::LOCK_NB)
        fail 'Another server instance is running'
      end

      f.truncate(0)
      f.write($$.to_s)
      f.flush

      yield
    end
  end

  def start
    File.umask(0077)

    lock(options[:address].sub_ext('.lock')) do
      begin
        options[:address].unlink
      rescue Errno::ENOENT
        # nop
      end

      UNIXServer.open(options[:address]) do |sock|
        auth_sock = Pathname(ENV['SSH_AUTH_SOCK'])
        if options[:address] != auth_sock
          if tty = ENV['SSH_TTY']
            agents[tty] = auth_sock
            $stderr.puts "Agent added: #{tty} #{auth_sock}"
          end
          unless options[:no_default]
            default_agent = auth_sock
            $stderr.puts "Default agent: #{default_agent}"
          end
        end

        Tmux.set_environment('SSH_AUTH_SOCK', options[:address])

        Thread.new do
          while Tmux.ping
            sleep 3
          end
          exit
        end

        loop do
          Thread.new(sock.accept, &method(:serve_client))

          agents.dup.each do |tty, auth_sock|
            unless File.exist?(tty) && File.exist?(auth_sock)
              agents.delete(tty)
              $stderr.puts "Agent purged: #{tty} #{auth_sock}"
            end
          end
        end
      end
    end
  end

  private

  def serve_client(sock)
    sock.extend(SSHAgentSocket)

    peer_euid, _ = sock.getpeereid
    if peer_euid != Process.euid
      fail
    end

    loop do
      type, contents = sock.read_packet
      break unless type

      if type == SSH_AGENTC_EXTENSION
        str = StringIO.new(contents)

        if str.read(str.read(4).unpack1('N')) == EXT_ID
          type = str.read(1).unpack1('C')

          case type
          when SSH_EXT_AGENTC_KILL_AGENT
            sock.send_packet(SSH_AGENT_SUCCESS)
            sock.flush
            exit
          when SSH_EXT_AGENTC_ADD_AGENT
            tty = str.read(str.read(4).unpack1('N'))
            auth_sock = str.read(str.read(4).unpack1('N'))
            auth_sock = nil if auth_sock == ''

            if File.exist?(tty) && (!auth_sock || File.exist?(auth_sock))
              agents[tty] = auth_sock
              $stderr.puts "Agent added: #{tty} #{auth_sock}"
              sock.send_packet(SSH_AGENT_SUCCESS)
            else
              sock.send_packet(SSH_AGENT_EXTENSION_FAILURE)
            end
          when SSH_EXT_AGENTC_REQUEST_AGENTS
            payload = {'' => default_agent}.merge(agents).compact.map do |k, v|
              [k.bytesize, k, v.bytesize, v].pack('Na*Na*')
            end
            payload = [payload.size, payload.join].pack('Na*')
            sock.send_packet(SSH_EXT_AGENT_AGENTS_ANSWER, payload)
          else
            sock.send_packet(SSH_AGENT_EXTENSION_FAILURE)
          end

          next
        end
      end

      agent = agents.fetch(Tmux.current_client, default_agent)
      if agent
        res_type, res_contents = UNIXSocket.open(agent) do |csock|
          csock.extend(SSHAgentSocket)
          csock.request(type, contents)
        end
      else
        res_type = SSH_AGENT_FAILURE
        res_contents = ''
      end

      sock.send_packet(res_type, res_contents)
    end

  end

end


def runtime_dir
  ENV.fetch('XDG_RUNTIME_DIR') do
    if `uname -s`.chomp == 'Darwin'
      break `getconf DARWIN_USER_TEMP_DIR`.strip
    end
    fail 'Unable to get runtime directory'
  end
end

def parse_options
  options = {
    address: Pathname(runtime_dir).join('tmux-ssh-agent.sock'),
  }

  OptionParser.new {|o|
    o.on('-a PATH', '--bind-address', '--address') {|v| options[:address] = Pathname(v) }
    o.on('-n', '--no-default-agent') {|v| options[:no_default] = true }
  }.parse!(ARGV)

  options[:no_default] = ENV.has_key?('SSH_CONNECTION') if options[:no_default].nil?

  options
end

def main
  options = parse_options
  action = ARGV.shift or fail 'No action specified'

  case action
  when 'start'
    fail 'Not running under tmux server' unless ENV.include?('TMUX')
    Server.new(options).start

  when 'stop'
    msg = [EXT_ID.bytesize, EXT_ID, SSH_EXT_AGENTC_KILL_AGENT].pack('Na*C')

    UNIXSocket.open(options[:address]) do |sock|
      sock.extend(SSHAgentSocket)

      type, * = sock.request(SSH_AGENTC_EXTENSION, msg)
      if type != SSH_AGENT_SUCCESS
        fail 'Failed to stop agent'
      end
    end

  when 'add'
    tty = ENV['SSH_TTY'] || `tty`.chomp
    auth_sock = ENV['SSH_AUTH_SOCK'] || ARGV.shift || fail('No SSH_AUTH_SOCK specified')

    if auth_sock == options[:address]
      fail 'Loop!'
    end

    msg = [EXT_ID.bytesize, EXT_ID, SSH_EXT_AGENTC_ADD_AGENT, tty.bytesize, tty, auth_sock.bytesize, auth_sock].pack('Na*CNa*Na*')

    UNIXSocket.open(options[:address]) do |sock|
      sock.extend(SSHAgentSocket)

      type, _ = sock.request(SSH_AGENTC_EXTENSION, msg)
      if type != SSH_AGENT_SUCCESS
        fail 'Failed to add agent'
      end
    end
  when 'list'
    msg = [EXT_ID.bytesize, EXT_ID, SSH_EXT_AGENTC_REQUEST_AGENTS].pack('Na*C')

    UNIXSocket.open(options[:address]) do |sock|
      sock.extend(SSHAgentSocket)

      type, contents = sock.request(SSH_AGENTC_EXTENSION, msg)
      if type != SSH_EXT_AGENT_AGENTS_ANSWER
        fail 'Failed to list agent'
      end

      str = StringIO.new(contents)
      str.read(4).unpack1('N').times do
        tty = str.read(str.read(4).unpack1('N'))
        auth_sock = str.read(str.read(4).unpack1('N'))
        puts "#{tty.empty? ? 'default' : tty}: #{auth_sock}"
      end
    end
  else
    fail "Unknown action `#{action}'"
  end
end

main
